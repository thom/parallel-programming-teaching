Exercise 1
==========

import org.jcsp.lang.*;

public class ClassroomExercise1 {
  public static void main(String[] args) {
    One2OneChannel chanA = Channel.one2one();
    One2OneChannel chanB = Channel.one2one();

    System.out.println("Start");
    new Parallel(new CSProcess[] { 
        new Process1(chanA.out(), chanB.out()),
        new Process2(chanA.in(), chanB.in()) 
      }
    ).run();
    System.out.println("End");
  }
}

class Process1 implements CSProcess {
  private ChannelOutput out1, out2;

  public Process1(ChannelOutput out1, ChannelOutput out2) {
    this.out1 = out1;
    this.out2 = out2;
  }

  public void run() {
    for (int i = 2; i <= 100; i = i + 2) {
      out1.write(new Integer(i));
      out2.write(new Integer(i + 1));
    }
  }
}

class Process2 implements CSProcess {
  private ChannelInput in1, in2;

  public Process2(ChannelInput in1, ChannelInput in2) {
    this.in1 = in1;
    this.in2 = in2;
  }

  public void run() {
    while (true) {
      Integer d = (Integer) in2.read();
      System.out.print("Read: " + d);
      d = (Integer) in1.read();
      System.out.println(" " + d);
    }
  }
}


Exercise 2
==========

import org.jcsp.lang.*;
public class ClassroomExercise2 {
  public static void main(String[] args) {
    One2OneChannel chanA = Channel.one2one();
    One2OneChannel chanB = Channel.one2one();

    System.out.println("Start");
    new Parallel(new CSProcess[] { new ProcessA(chanA.out(), chanB.in()), 
                                   new ProcessB(chanB.out(), chanA.in()) }).run();
    System.out.println("End");
  }
}

class ProcessA implements CSProcess {
  private ChannelOutput out1;
  private ChannelInput in1;

  public ProcessA(ChannelOutput out, ChannelInput in) {
    this.out1 = out; this.in1 = in;
  }

  public void run() {
    for (int i = 1; i <= 5; i++) {
      out1.write(new Integer(i));
      System.out.println("Sent " + i);
    }
    for (int i = 1; i <= 5; i++) {
      Integer d = (Integer) in1.read();
      System.out.println("Read " + d.intValue());
    }
  }
}

class ProcessB implements CSProcess {
  private ChannelInput in1;
  private ChannelOutput out1;

  public ProcessB(ChannelOutput out, ChannelInput in) {
    this.in1 = in; this.out1 = out;
  }

  public void run() {
    for (int i = 1; i <= 5; i++) {
      out1.write(new Integer(i));
      System.out.println("Sent " + i);
    }
    for (int i = 1; i <= 5; i++) {
      Integer d = (Integer) in1.read();
      System.out.println("Read " + d.intValue());
    }
  }
}
